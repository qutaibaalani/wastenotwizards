body {
    font-family: Georgia, serif;
    background-color: #F2F1F7; /* Light Purple */
}

.flex {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.h-screen {
    height: 95vh;
}

.registration-form {
    max-width: 100%;
    background-color: #D6BCFA; /* Lighter Purple */
    border-radius: 0.5rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    padding: 1rem;
    margin: 0;
    height: 100%;
    overflow-y: auto;
}

.form-header {
    text-align: center;
    margin-bottom: 2rem;
}

.form-title {
    font-size: 1.5rem;
    font-weight: bold;
    color: #6B46C1; /* Medium Purple */
}

.logo-container {
    display: flex;
    justify-content: center;
    margin-bottom: 2rem;
}

.logo {
    width: 80px;
    height: auto;
    border: 1px solid #c9baee; /* Medium Purple */
    border-radius: 50%; /* Circular border */
    animation: rotation 5s infinite linear; /* New animation */
}

/* Define the animation */
@keyframes rotation {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(359deg);
    }
}

.form-container {
    display: flex;
    flex-direction: column;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-label {
    font-size: 0.875rem;
    font-weight: bold;
    color: #6B46C1; /* Medium Purple */
    margin-bottom: 0.5rem;
}

.form-input {
    width: 100%;
    appearance: none;
    border: 1px solid #6B46C1; /* Medium Purple */
    border-radius: 0.25rem;
    padding: 0.75rem 1rem;
    line-height: 1.5;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    background-color: #FFFDD0; /* Light Yellow */
}

/* New hover effect */
.form-input:hover {
    border-color: #A67C00; /* Darker Yellow */
}

/* New focus effect */
.form-input:focus {
    border-color: #A67C00; /* Darker Yellow */
    outline: 0;
    box-shadow: 0 0 0 0.2rem rgba(113, 153, 244, 0.25);
}

.form-button {
    background-color: #6B46C1; /* Medium Purple */
    color: #FFFFFF; /* White */
    font-weight: bold;
    font-size: 0.875rem;
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    border: none;
    outline: none;
    cursor: pointer;
    margin-bottom: 1rem;
}

.form-button:hover {
    background-color: #4C1D95; /* Darker Purple */
}

try a login form with floating labels




<i class="material-icons">face</i> look up material-icons


// // adjust ngOnIniT
// import { Component, OnInit, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';
// import * as mapboxgl from 'mapbox-gl';
// import { PostAddressService } from './user-address.service';
// import { HttpClient } from '@angular/common/http';
// import { PostListComponent } from '../post-list/post-list.component'; // Adjust the import path based on your project structure

// export interface Post {
//   foodlist: string
// }

// export interface Address {
//   user_longitude: number;
//   user_latitude: number;
// }

// export interface post_address {
//   pins: Array<any>
// }

// @Component({
//   selector: 'app-map',
//   templateUrl: './mapbox.component.html',
//   styleUrls: ['./mapbox.component.css']
// })
// export class MapBoxComponent implements OnInit {
//   closestPosts: Post[] = [];
//   private map: mapboxgl.Map;
//   private mapContainer: HTMLElement;

//   private user_address: Address[]; 
//   private coordinates: any;

//   constructor(private addressService: PostAddressService, 
//   private http: HttpClient,
//   private componentFactoryResolver: ComponentFactoryResolver,
//   private viewContainerRef: ViewContainerRef  ) {}


//   getUsernameFromLocalStorage(): void {
//     const storedData = localStorage.getItem('username');
//     if (storedData) {
//       const data = JSON.parse(storedData);
//       return data
//     }
//   }

//   getTokenFromLocalStorage(): void {
//     const storedData = localStorage.getItem('token')
//     if (storedData){
//       const data = JSON.parse(storedData)
//       return data
//     }else {
//       return undefined
//     }
//   }

//   ngOnInit() {
//     const user = this.getUsernameFromLocalStorage()
//     const token = this.getTokenFromLocalStorage()

//     this.addressService.getUserAddresses(user, token).subscribe(
//         (user_info) => {
//             this.user_address = [user_info['user_longitude'], user_info['user_latitude']]

//             this.addressService.getPostAddresses().subscribe(
//                 (post_info) => {
//                     this.coordinates = []
//                     post_info.forEach((pin) => {
//                         this.coordinates.push([pin.longitude, pin.latitude])
//                     });

//                     this.initMap(this.user_address, this.coordinates)
//                     this.fetchAndDisplayClosestPosts(this.user_address)
//                 },
//                 (error) => {
//                     console.error('Error fetching post addresses:', error);
//                 }
//             );
//         },
//         (error) => {
//             console.error('Error fetching user addresses:', error);
//         }
//     )
//   }

//   private fetchAndDisplayClosestPosts(user_coor): void {
//     this.http.get<Post[]>(`https://waste-not-wizards.onrender.com/api/closePosts?latitude=${user_coor[1]}&longitude=${user_coor[0]}`)
//       .subscribe(
//         (data) => {
//           this.closestPosts = data.slice(0, 10);
//           console.log(this.closestPosts) 
      
//         },
//         (error) => {
//           console.error('Error fetching closest posts:', error);
//         }
//       );
//   }

//   private initMap(user_coordinates, pin_coordinates) {
//     console.log(user_coordinates);
//     (mapboxgl as any).accessToken = 'pk.eyJ1IjoibWVhZ2FucnViaW5vIiwiYSI6ImNsa2QweHh0czBzbzMzanBoamxlNWYwN3EifQ.Z1_FaWyOr3_mK9ErWinJFw';
//     this.map = new mapboxgl.Map({
//       container: this.mapContainer,
//       style: 'mapbox://styles/mapbox/streets-v12',
//       center: new mapboxgl.LngLat(user_coordinates[0], user_coordinates[1]), // Set the initial center of the map
//       zoom: 10 // Set the initial zoom level of the map
//     });

//     if (pin_coordinates && Array.isArray(pin_coordinates)){
//     pin_coordinates.forEach((pin_arr) => {
//       var long = pin_arr[0]
//       var lat = pin_arr[1]
//       new mapboxgl.Marker()
//         .setLngLat([long, lat])
//         .addTo(this.map);
//     });
//   } else {console.log("user_coordinates")}
//   }
// }







<link href="https://api.tiles.mapbox.com/mapbox-gl-js/v0.40.1/mapbox-gl.css" rel="stylesheet"/>
<script src="https://api.tiles.mapbox.com/mapbox-gl-js/v0.40.1/mapbox-gl.js"></script>

<div id="map"></div>

<div *ngIf="reservedPosts.length > 0" class="post-container">
  <h2>Your Reserved Posts</h2>
  <ul>
    <li *ngFor="let rpost of reservedPosts">
      <strong>{{ rpost.post }}</strong>
      <p>{{ rpost.id }}</p>
     
    </li>
  </ul>
</div>
<div *ngIf="reservedPosts.length === 0" class="post-container">
  <strong>No reserved posts.</strong>
</div>

<div *ngIf="closestPosts.length > 0" class="post-container">
  <h2>Closest Posts to You</h2>
  <ul>
    <li *ngFor="let post of closestPosts" class="post-item">
      <div class="food-name">{{ post.foodlist }}</div>
      <button class="reserve-button" (click)="reserve($event, post.id)">Reserve Now!</button>
      
    </li>
  </ul>
</div>
<div *ngIf="closestPosts.length === 0" class="post-container">
  <p>No posts found nearby.</p>
</div>
